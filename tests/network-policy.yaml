# Default values for kubedeploy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- (int) Number of pods to load balance across
replicaCount: 1

# -- available deployment modes currently supported:
#   <ul><li>**Deployment**</li>
#   <li>**Job**</li>
#   <li>**Statefulset**</li>
#   <li>**Cronjob**</li></ul>
deploymentMode: Deployment

# -- Allow override of kubernetes version
# by default this will be automatically detected and requires no modification
kubeVersionOverride: ""

cronjobspec:
  # -- define cronjob schedule, for details see: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#writing-a-cronjob-spec
  schedule: "0 * * * *"
  # ┌───────────── minute (0 - 59)
  # │ ┌───────────── hour (0 - 23)
  # │ │ ┌───────────── day of the month (1 - 31)
  # │ │ │ ┌───────────── month (1 - 12)
  # │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
  # │ │ │ │ │                                   7 is also Sunday on some systems)
  # │ │ │ │ │                                   OR sun, mon, tue, wed, thu, fri, sat
  # │ │ │ │ │
  # * * * * *

  # define restart policy for cronjob if deploymentMode is Cronjob.
  restartPolicy: OnFailure
  # -- define command for cronjob
  command: []
  # -- define args for cronjob
  args: []
  # -- define job backoff limit, see: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  backoffLimit: 3
  # -- (optional) define deadline for starting the job, see: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#starting-deadline
  startingDeadlineSeconds: 180
  # -- define number of successful job logs to keep
  successfulJobsHistoryLimit: 3
  # -- define number of failed job logs to keep
  failedJobsHistoryLimit: 1
  # -- concurrency policy options: Allow (default), Forbid or Replace, see: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#concurrency-policy
  concurrencyPolicy: ""

jobspec:
  # -- define restart policy for jobs if deploymentMode is: Job. Please see https://kubernetes.io/docs/concepts/workloads/controllers/job/#handling-pod-and-container-failures
  restartPolicy: OnFailure
  # -- define command for job
  command: []
  # -- define args for job
  args: []
  # -- define job paralelisam see: https://kubernetes.io/docs/concepts/workloads/controllers/job/#controlling-parallelism
  parallelism: 1
  # -- define job backoff limit, see: https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy
  backoffLimit: 3

# -- Define a list of hashes containing name and data that will be used in generating additional configmaps
# please see values.yaml for example
configMaps: []
  # - name: kubedeploy-configmap
  #   mount: True # should this configmap be mounted as volume on containers
  #   mountPath: /data/confmap # define mount path for mounting the configmap
  #   data:
  #     kubedeploy: |+
  #       configmap values
  #
  # - name: kubedeploy2-configmap
  #   mount: False
  #   data:
  #     config: |+
  #       config2

initContainers:
  # -- define if we should deploy init containers within a pod
  # see https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  enabled: false
  # -- default initContainers pull policy
  pullPolicy: IfNotPresent
  # -- Define init containers resources
  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- (list) sequential list of init containers. Each init container must complete successfully before the next one starts
  # @default -- see below
  containers:
      # initContainers.containers[0].name -- (required) define init container name
      # @default -- busybox-init
    - name: "busybox-init"
      # -- (required) define initContainer repository
      repository: busybox
      # -- Overrides the image tag whose default is latest
      tag: "latest"
      # -- Define custom command for initContainer to run
      command: ["sh", "-c", "exit 0"]
      # -- Define custom arguments for initContainer
      args: []
      # -- Define custom resources for this specific init container. If not specified
      # default resources from initContainer.resources will be used
      resources: {}

additionalContainers:
  # -- define if we should deploy additional containers within a pod
  # see https://kubernetes.io/docs/concepts/workloads/pods/
  enabled: false
  # -- default additionalContainers pull policy
  pullPolicy: IfNotPresent
  # -- Define default resources for all additional containers
  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- (list) list of additional containers.
  # @default -- see below
  containers:
      # additionalContainer.containers[0].name -- (required) define additional container name
      # @default -- busybox-init
    - name: "busybox-additional"
      # -- (required) define additionalContainer repository
      repository: busybox
      # -- Overrides the image tag whose default is latest
      tag: "latest"
      # -- Define custom command for additionalContainer to run
      command: ["sh", "-c", "while true; do sleep 30; done;"]
      # -- Define custom arguments for additionalContainer
      args: []
      # -- Define container ports that will be exposed
      # see: [containerPort](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#containerport-v1-core)
      ports: []
        #- name: http
        #  containerPort: 80
        #  protocol: TCP
        # - name: prometheus
        #   containerPort: 9000
        #   protocol: TCP
      healthcheck:
        # -- Define custom healthcheck probes for container
        enabled: false
        probes:
          # -- Define [livenessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
          livenessProbe: {}
          # -- Define [readinessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
          readinessProbe: {}

      # -- Define custom resources for this specific additional container. If not specified
      # default resources from additionalContainer.resources will be used
      resources: {}

healthcheck:
  # -- Disable automatic healthcheck probes. Automatic probes will always create a http healthcheck probe if there is a port named http
  disableAutomatic: false
  # -- Define custom healthcheck probes for container, overriding any automatic probes
  enabled: false
  probes:
    # -- Define [livenessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    livenessProbe: {}
    # -- Define [readinessProbe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    readinessProbe: {}

image:
  # -- Define container repository
  repository: nginx
  # -- Default container pull policy
  pullPolicy: IfNotPresent
  # -- Define the image tag whose default is the chart appVersion.
  tag: "latest"
  # -- Define custom command for image to run. [Reference](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
  command: []
  # -- Define custom arguments for image to run. [Reference](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/)
  args: []

# -- Define [ImagePullSecrets](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#podspec-v1-core)
imagePullSecrets: []

# -- Override release name used in calculated "releasename-chartname" default naming convention
nameOverride: ""

# -- Override full resource names instead of using calculated "releasename-chartname" default naming convention
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Define pod's [annotations](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
podAnnotations: {}

# -- Define pod's [securityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
podSecurityContext: {}
  # fsGroup: 2000

# -- Define container's [securityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

networkPolicy:
  # -- Enables pod based [NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
  enabled: true
  # -- Define namespace where ingress controllers are deployed
  # Used to generate automatic policy to enable ingress access when .Values.ingress is enabled
  ingressNamespace: ingress
  # -- Define namespace where monitoring stack is deployed
  # Used to generate automatic policy to enable monitoring access when .Values.monitoring is enabled
  monitoringNamespace: monitoring
  # -- (list) Define spec.ingress for NetowkPolicy rules
  ingress:
    - from:
        - ipBlock:
            cidr: 172.17.0.0/16
            except:
              - 172.17.1.0/24
        - namespaceSelector:
            matchLabels:
              project: myproject
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 6379
  # -- (list) Define spec.egress for NetowkPolicy rules
  egress:
    - to:
        - ipBlock:
            cidr: 10.0.0.0/24
      ports:
        - protocol: TCP
          port: 5978

# -- Define container ports that will be exposed
# see: [containerPort](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#containerport-v1-core)
ports:
  - name: http
    containerPort: 80
    protocol: TCP
  - name: metrics
    containerPort: 9000
    protocol: TCP

# -- Define environment variables for containers
# for reference see: [env](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#envvar-v1-core).
# Environment variables set will be exposed both to main container and all of the initContainers
env: []
  # - name: ENV1
  #   value: Env-value
  #   # see: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#envfromsource-v1-core
  # - name: fromvalue
  #   valueFrom:
  #     secretKeyRef:
  #       name: secret-name
  #       key: key-name

service:
  # -- Service type see [Reference](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) for available options.
  type: ClusterIP
  # -- Controls if the service should be deployed for this release
  enabled: true
  # -- (list) Define listening port for service
  # see: [servicePort](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#serviceport-v1-core)
  # @default -- see service.ports[]
  ports:
      # service.ports[0].port (int, required) -- Define port number on which service will listen
      # @default -- 80
    - port: 80
      # -- (string, required) Define name for the exposed container port that the service will target.
      targetPort: http
      # -- (required) Define service protocol. [Supported protocols](https://kubernetes.io/docs/concepts/services-networking/service/#protocol-support)
      protocol: TCP
      # -- (string, required) Name of the service port. This should match container's port name
      name: http

# -- Define [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/) object
# @default -- see ingress object values
ingress:
  # -- Enable Ingres for release
  enabled: true
  # -- Ingress class name
  className: ""
  # -- Default Ingress pathType
  pathType: ImplementationSpecific
  # -- Additional Ingress annotations
  # @default -- defaults to haproxy ingress and letsencrypt issuer
  annotations:
    kubernetes.io/ingress.class: haproxy
    cert-manager.io/cluster-issuer: letsencrypt
  # -- (list) Ingress host list.
  # @default -- see ingress.hosts[0] values
  hosts:
      # ingress.hosts[0].host -- (string, required) Define Ingress hostname
      # @default -- chart-example.local
    - host: chart-example.local
      # -- (list) Ingress host paths
      paths:
        - path: /
  # -- (list) Ingress TLS list
  # @default -- see ingress.tls[0] values
  tls:
    # ingress.tls[0].secretName -- (string, required) Name of the secret to use for storing ssl certificate
    # @default -- chart-example-tls
    - secretName: chart-example-tls
      # -- (list) List of TLS enabled Ingress hosts
      hosts:
        - chart-example.local

persistency:

  # -- (string) Define custom name for persistent storage class name
  # @default -- uses cluster default storageClassName
  storageClassName:

  # -- Enable support for persistent volumes.
  # Supported only in Statefulset deploymentMode with any number of replicas
  enabled: false
  capacity:
    # -- Define storage capacity
    storage: 5Gi
  # -- Define storage [access modes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes). Must be supported by available storageClass
  accessModes:
    - ReadWriteOnce
  # -- Define path where persistent volume will be mounted in container
  mountPath: "/data"

# -- We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. See [resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for syntax
resources: {}
  # If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Enable autoscaling feature. This will only work when deploymentMode is set to **Deployment**
  enabled: false
  # -- Number of minimum replicas for autoscaling
  minReplicas: 1
  # -- Number of max replicas for autoscaling
  maxReplicas: 10
  # -- (int) Target cpu utilization as percentage of resources.requests.cpu
  targetCPUUtilizationPercentage: 80
  # -- (int) Target memory utilization as percentage of resources.requests.mem
  targetMemoryUtilizationPercentage:


keda:
  # -- Kubernetes Event-driven Autoscaling: KEDA 2.x [ref](https://keda.sh/docs/2.3/concepts/scaling-deployments/)
  # **Note:** mutually exclusive with HPA, enabling KEDA disables HPA
  enabled: false
  # -- Number of minimum replicas for KEDA autoscaling
  minReplicas: 1
  # -- Number of maximum replicas for KEDA autoscaling
  maxReplicas: 10
  # -- Interval for checking each trigger [ref](https://keda.sh/docs/2.10/concepts/scaling-deployments/#pollinginterval)
  pollingInterval: 30
  # -- The period to wait after the last trigger reported active before scaling the resource back to 0 [ref](https://keda.sh/docs/2.10/concepts/scaling-deployments/#cooldownperiod)
  cooldownPeriod: 300
  # -- After scaled object is deleted return workload to initial replica count [ref](https://keda.sh/docs/2.10/concepts/scaling-deployments/#advanced)
  restoreToOriginalReplicaCount: false
  scaledObject:
    # -- Scaled object annotations, can be used to pause scaling [ref](https://keda.sh/docs/2.10/concepts/scaling-deployments/#pause-autoscaling)
    annotations: {}
  # -- HPA configurable scaling behavior see [ref](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior)
  behavior: {}
  #  scaleDown:
  #    stabilizationWindowSeconds: 300
  #    policies:
  #    - type: Percent
  #      value: 100
  #      periodSeconds: 15
  # -- Keda triggers [ref](https://keda.sh/docs/2.10/concepts/scaling-deployments/#triggers) see values for prometheus example
  triggers: []
  #  - type: prometheus
  #    metadata:
  #      serverAddress: http://<prometheus-host>:9090
  #      metricName: haproxy_process_idle_time_percent
  #      threshold: '50'
  #      query: avg(100-avg_over_time(haproxy_process_idle_time_percent{container="kubernetes-ingress-controller",service="mytest-kubernetes-ingress"}[2m]))

# -- Define custom [node selectors](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
nodeSelector: {}

# -- Define pod [tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
tolerations: []

# -- Define pod [affinity](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/)
affinity: {}

podDisruptionBudget:
  # -- Enable and define pod disruption budget default (off)
  # see: [podDisruptionBudget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/)
  enabled: false
  # -- Minimum available replicas
  minAvailable: 1
  # -- (int) Maximum unavailable replicas
  maxUnavailable:

## Monitoring

# -- Parameters for the Prometheus [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.ServiceMonitor) or [PodMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.PodMonitor) objects.
# @default -- see below
monitoring:
  # -- Enable monitoring. If service.enabled is true chart will generate ServiceMonitor object, otherwise PodMonitor will be used.
  enabled: true
  # -- Provide additional labels to the ServiceMonitor metadata
  labels: {}
  # -- Additional metric labels
  targetLabels: []
  # -- Provide named service port used for scraping
  scrapePort: metrics
  # -- Provide HTTP path to scrape for metrics.
  scrapePath: /metrics
  # -- Provide interval at which metrics should be scraped
  scrapeInterval: 20s
  # -- Timeout after which the scrape is ended (must be less than scrapeInterval)
  scrapeTimeout: 15s
  # -- HTTP scheme to use for scraping.
  scheme: http
  # -- TLS configuration to use when scraping the endpoint
  tlsConfig: {}
  # -- Provide additional metricRelabelings to apply to samples before ingestion.
  metricRelabelings: []
  # -- Provide additional relabelings to apply to samples before scraping
  relabelings: []
