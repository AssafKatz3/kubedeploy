suite: test ingress
templates:
  - ingress.yaml

tests:
  - it: test if ingress is disabled by default
    asserts:
      - hasDocuments:
          count: 0

  - it: test ingress defaults when enabled
    set:
      ingress:
        enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - isAPIVersion:
          of: networking.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy
      - isSubset:
          path: metadata.annotations
          content:
            cert-manager.io/cluster-issuer: letsencrypt
      - equal:
          path: spec.ingressClassName
          value: haproxy
      - isSubset:
          path: spec.tls[0]
          content:
            hosts:
              - "chart-example.local"
            secretName: chart-example-tls
      - isSubset:
          path: spec.rules[0]
          content:
            host: "chart-example.local"
            http:
              paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 80

  # Ingress will always follow the first service port defined in service
  - it: test ingress defaults with changed service port
    set:
      ingress:
        enabled: true
      service:
        ports:
          - name: whatever
            targetPort: http
            port: 8080
            protocol: TCP
          - name: http
            targetPort: http
            port: 80
            protocol: TCP
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - isAPIVersion:
          of: networking.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy
      - isSubset:
          path: metadata.annotations
          content:
            cert-manager.io/cluster-issuer: letsencrypt
      - equal:
          path: spec.ingressClassName
          value: haproxy
      - isSubset:
          path: spec.tls[0]
          content:
            hosts:
              - "chart-example.local"
            secretName: chart-example-tls
      - isSubset:
          path: spec.rules[0]
          content:
            host: "chart-example.local"
            http:
              paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 8080

  - it: test ingress with single host and path and changed service port
    set:
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          haproxy.org/deny-list: "192.168.1.0/24, 192.168.2.100"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - host: domain1.tld
            paths:
              - path: /custom-path
        tls:
          - secretName: domain1-tls
            hosts:
              - domain1.tld
      service:
        ports:
          - name: whatever
            targetPort: http
            port: 8080
            protocol: TCP
          - name: http
            targetPort: http
            port: 80
            protocol: TCP
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - isAPIVersion:
          of: networking.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy
      - isSubset:
          path: metadata.annotations
          content:
            haproxy.org/deny-list: "192.168.1.0/24, 192.168.2.100"
            cert-manager.io/cluster-issuer: letsencrypt-prod
      - equal:
          path: spec.ingressClassName
          value: haproxy
      - isSubset:
          path: spec.tls[0]
          content:
            hosts:
              - "domain1.tld"
            secretName: domain1-tls
      - isSubset:
          path: spec.rules[0]
          content:
            host: "domain1.tld"
            http:
              paths:
                - path: /custom-path
                  pathType: Prefix
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 8080

  - it: test ingress with multiple hosts and paths and changed service port
    set:
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          haproxy.org/deny-list: "192.168.1.0/24, 192.168.2.100"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - host: domain1.tld
            paths:
              - path: /custom-path
          - host: domain2.tld
            paths:
              - path: /
              - path: /subdomain
        tls:
          - secretName: domain1-tls
            hosts:
              - domain1.tld
          - secretName: domain2-tls
            hosts:
              - domain2.tld
      service:
        ports:
          - name: whatever
            targetPort: http
            port: 8080
            protocol: TCP
          - name: http
            targetPort: http
            port: 80
            protocol: TCP
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Ingress
      - isAPIVersion:
          of: networking.k8s.io/v1
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy
      - isSubset:
          path: metadata.annotations
          content:
            haproxy.org/deny-list: "192.168.1.0/24, 192.168.2.100"
            cert-manager.io/cluster-issuer: letsencrypt-prod
      - equal:
          path: spec.ingressClassName
          value: haproxy
      - lengthEqual:
          path: spec.tls
          count: 2
      - isSubset:
          path: spec.tls[0]
          content:
            hosts:
              - "domain1.tld"
            secretName: domain1-tls
      - isSubset:
          path: spec.tls[1]
          content:
            hosts:
              - "domain2.tld"
            secretName: domain2-tls
      - lengthEqual:
          path: spec.rules
          count: 2
      - isSubset:
          path: spec.rules[0]
          content:
            host: "domain1.tld"
            http:
              paths:
                - path: /custom-path
                  pathType: Prefix
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 8080
      - isSubset:
          path: spec.rules[1]
          content:
            host: "domain2.tld"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 8080
                - path: /subdomain
                  pathType: Prefix
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 8080

  # some values are optional
  - it: test ingress with missing values
    set:
      ingress:
        enabled: true
        # pathType empty should default to ImplementationSpecific
        pathType: ""
        hosts:
          # host without path should default to / path
          - host: domain1.tld
        # should result in no tls config
        tls: ""
        # this should skip defining ingressClassName
        className: ""
    asserts:
      - notExists:
          path: spec.ingressClassName
      - notExists:
          path: spec.tls
      - lengthEqual:
          path: spec.rules
          count: 1
      - isSubset:
          path: spec.rules[0]
          content:
            host: "domain1.tld"
            http:
              paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: RELEASE-NAME-kubedeploy
                      port:
                        number: 80
