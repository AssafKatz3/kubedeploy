suite: test extraSecrets
templates:
  - secrets.yaml
  - statefulset.yaml
  - deployment.yaml

tests:

  - it: test if extraSecrets is disabled by default
    template: secrets.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: test custom secrets
    template: secrets.yaml
    set:
      extraSecrets:
        - name: opaque-secret
          mount: True
          mountPath: /data/secret-vol0
          data:
            key: value

        - name: ssh-key-secret
          type: kubernetes.io/ssh-auth
          data:
            ssh-privatekey: |
              MIIEpQIBAAKCAQEAulqb/Y ...
    asserts:
      - hasDocuments:
          count: 2
      - isKind:
          of: Secret
      - exists:
          path: data
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy-opaque-secret
        documentIndex: 0
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubedeploy-ssh-key-secret
        documentIndex: 1
      - equal:
          path: type
          value: Opaque
        documentIndex: 0
      - equal:
          path: type
          value: kubernetes.io/ssh-auth
        documentIndex: 1
      - isSubset:
          path: data
          content:
            key: dmFsdWU=
        documentIndex: 0
      - isSubset:
          path: data
          content:
            ssh-privatekey: TUlJRXBRSUJBQUtDQVFFQXVscWIvWSAuLi4K
        documentIndex: 1

  - it: test configmaps mounts missing mountPoint
    template: deployment.yaml
    set:
      deploymentMode: Deployment
      extraSecrets:
        - name: faulty-secet
          mount: True
          data:
            kubedeploy: |
              secret value
    asserts:
      - failedTemplate:
          errorMessage: "You need to define .Values.extraSecrets[].mountPath if .Values.extraSecrets[].mount is set to True"

  - it: test extraSecrets mounts on deployments
    template: deployment.yaml
    set:
      deploymentMode: Deployment
      extraSecrets:
        - name: secret-name
          mount: True
          mountPath: /data/secret-vol0
          data:
            kubedeploy: |
              seceret values

        - name: secret-name2
          data:
            config: |
              config2
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 1
      - isSubset:
          path: spec.template.spec.volumes[0]
          content:
            name: RELEASE-NAME-kubedeploy-secret-name
            secret:
              secretName: RELEASE-NAME-kubedeploy-secret-name
      - lengthEqual:
          path: spec.template.spec.containers[0].volumeMounts
          count: 1
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[0]
          content:
            mountPath: /data/secret-vol0
            name: RELEASE-NAME-kubedeploy-secret-name

  - it: test extraSecret mounts on statefulsets with persistence
    template: statefulset.yaml
    set:
      deploymentMode: Statefulset
      persistency:
        enabled: true
      extraSecrets:
        - name: secret-name
          mount: True
          mountPath: /data/secret-vol0
          data:
            kubedeploy: |
              secret values

        - name: secret-name2
          data:
            config: |
              config2
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: StatefulSet
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 1
      - isSubset:
          path: spec.template.spec.volumes[0]
          content:
            name: RELEASE-NAME-kubedeploy-secret-name
            secret:
              secretName: RELEASE-NAME-kubedeploy-secret-name
      - lengthEqual:
          path: spec.template.spec.containers[0].volumeMounts
          count: 2
      - isSubset:
          path: spec.template.spec.containers[0].volumeMounts[1]
          content:
            mountPath: /data/secret-vol0
            name: RELEASE-NAME-kubedeploy-secret-name
